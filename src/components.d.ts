/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PlaygroundControl } from "./components/html-playground/playground";
export namespace Components {
    interface HtmlPlayground {
        /**
          * One or more controls to provide to the playground. Each control has a name, type, and value. The { name: value } pair will be made available to the template's context.
         */
        "controls": PlaygroundControl[];
        /**
          * The template to render. Templates use Mustache syntax and get their context (i.e. view data) from the data provided in the registered controls.
         */
        "template": string;
    }
}
declare global {
    interface HTMLHtmlPlaygroundElement extends Components.HtmlPlayground, HTMLStencilElement {
    }
    var HTMLHtmlPlaygroundElement: {
        prototype: HTMLHtmlPlaygroundElement;
        new (): HTMLHtmlPlaygroundElement;
    };
    interface HTMLElementTagNameMap {
        "html-playground": HTMLHtmlPlaygroundElement;
    }
}
declare namespace LocalJSX {
    interface HtmlPlayground {
        /**
          * One or more controls to provide to the playground. Each control has a name, type, and value. The { name: value } pair will be made available to the template's context.
         */
        "controls"?: PlaygroundControl[];
        /**
          * The template to render. Templates use Mustache syntax and get their context (i.e. view data) from the data provided in the registered controls.
         */
        "template"?: string;
    }
    interface IntrinsicElements {
        "html-playground": HtmlPlayground;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "html-playground": LocalJSX.HtmlPlayground & JSXBase.HTMLAttributes<HTMLHtmlPlaygroundElement>;
        }
    }
}
